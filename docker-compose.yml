version: '3.8'

services:
  # Rust Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    ports:
      - "8080:8080"
      - "9090:9090" # Metrics endpoint
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://buhera_user:buhera_pass@postgres:5432/buhera_west
      - REDIS_URL=redis://redis:6379/0
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
    volumes:
      - ./:/app
      - cargo_cache:/usr/local/cargo/registry
      - target_cache:/app/target
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - buhera-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - NEXT_PUBLIC_OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - buhera-network

  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=buhera_west
      - POSTGRES_USER=buhera_user
      - POSTGRES_PASSWORD=buhera_pass
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U buhera_user -d buhera_west"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - buhera-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - buhera-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - buhera-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - buhera-network

  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - buhera-network

  # Weather data ingestion worker
  weather-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://buhera_user:buhera_pass@postgres:5432/buhera_west
      - REDIS_URL=redis://redis:6379/0
      - WEATHER_API_KEYS=${WEATHER_API_KEYS}
      - WORKER_TYPE=weather_ingestion
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - buhera-network

  # Spatial analysis worker
  spatial-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://buhera_user:buhera_pass@postgres:5432/buhera_west
      - REDIS_URL=redis://redis:6379/0
      - WORKER_TYPE=spatial_analysis
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - buhera-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  cargo_cache:
  target_cache:

networks:
  buhera-network:
    driver: bridge 